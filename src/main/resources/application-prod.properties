# DataSource para PostgreSQL na AWS RDS
# As variáveis de ambiente serão injetadas pelo Elastic Beanstalk ou outro serviço de nuvem
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuração JPA para produção (sem ddl-auto, pois o schema será criado manualmente)
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# IMPORTANTE: NUNCA USE "update" ou "create-drop" em produção!
spring.jpa.hibernate.ddl-auto=none 
spring.jpa.open-in-view=false

# Logs SQL (opcional em produção, mas pode ser útil para debug inicial, depois desabilitar)
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Configurações de Segurança
# Essas variáveis serão definidas no ambiente da AWS (Elastic Beanstalk)
security.client-id=${PROD_CLIENT_ID}
security.client-secret=${PROD_CLIENT_SECRET}
 # Exemplo: 1 hora para tokens de acesso
security.jwt.duration=${PROD_JWT_DURATION:3600}
# URL base da API
agendaki.auth-server-url=${AUTH_SERVER_URL}

# CORS Origins para seu frontend em produção
# Adapte para o domínio real do seu frontend!
cors.origins=${PROD_CORS_ORIGINS:http://localhost:5173}

# JWT KeyStore (Chave RSA)
security.jwt.key-store-path=classpath:agendaki.jks
security.jwt.key-store-password=${JWT_KEYSTORE_PASSWORD}
security.jwt.key-alias=${JWT_KEY_ALIAS}
security.jwt.key-password=${JWT_KEY_PASSWORD}


# CONSOLE PARA DEPURAÇÃO SPRING SECURITY
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.thomaskavi.agendaki=DEBUG

# Alterar o formato da key
spring.security.oauth2.authorizationserver.jwt.key-store-type=PKCS12
